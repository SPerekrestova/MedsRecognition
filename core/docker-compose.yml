version: '3.8'

services:
  # Local Supabase stack
  supabase-db:
    image: supabase/postgres:15.1.0.117
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - .env
      - .env.supabase-db
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  supabase-studio:
    image: supabase/studio:20240524-8f08f29
    restart: unless-stopped
    ports:
      - "54323:3000"
    env_file:
      - .env
      - .env.supabase-studio
    depends_on:
      - supabase-db
      - kong

  kong:
    image: kong:2.8.1
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env
      - .env.kong
    volumes:
      - ./supabase/volumes/api:/var/lib/kong
    depends_on:
      - supabase-auth
      - supabase-rest
      - supabase-storage

  supabase-auth:
    image: supabase/gotrue:v2.69.0
    restart: unless-stopped
    env_file:
      - .env
      - .env.supabase-auth
    depends_on:
      supabase-db:
        condition: service_healthy
      mailhog:
        condition: service_started

  supabase-rest:
    image: postgrest/postgrest:v11.1.0
    restart: unless-stopped
    env_file:
      - .env
      - .env.supabase-rest
    depends_on:
      supabase-db:
        condition: service_healthy

  supabase-storage:
    image: supabase/storage-api:v0.40.4
    restart: unless-stopped
    env_file:
      - .env
      - .env.supabase-storage
    volumes:
      - ./supabase/volumes/storage:/var/lib/storage
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-rest:
        condition: service_started

  meta:
    image: supabase/postgres-meta:v0.68.0
    restart: unless-stopped
    env_file:
      - .env
      - .env.meta
    depends_on:
      supabase-db:
        condition: service_healthy

  # Email testing
  mailhog:
    image: mailhog/mailhog
    restart: unless-stopped
    ports:
      - "8025:8025" # Web UI
      - "1025:1025" # SMTP server

  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-auth:
        condition: service_started
      supabase-storage:
        condition: service_started
    ports:
      - "8000:8000"
    volumes:
      - ./:/app  # Mount code for development
    env_file:
      - .env
      - .env.app
    command: >
      sh -c '
        echo "Waiting for all services to be ready..." &&
        echo "Applying database migrations..." &&
        python scripts/db_management.py apply_migrations &&
        echo "Creating storage bucket..." &&
        python -c "
        import os
        import time
        import requests
        
        # Wait a bit for storage to be ready
        time.sleep(5)
        
        # Create the storage bucket
        headers = {
            \"apikey\": os.environ.get(\"SUPABASE_KEY\"),
            \"Authorization\": f\"Bearer {os.environ.get(\"SUPABASE_KEY\")}\"
        }
        try:
            print(\"Attempting to create storage bucket...\")
            response = requests.post(
                f\"{os.environ.get(\"SUPABASE_URL\")}/storage/v1/buckets\",
                headers=headers,
                json={\"name\": \"scans\", \"public\": True}
            )
            if response.status_code == 200 or response.status_code == 201:
                print(\"Storage bucket created successfully!\")
            elif response.status_code == 400 and \"already exists\" in response.text:
                print(\"Storage bucket already exists!\")
            else:
                print(f\"Error creating bucket: {response.status_code} - {response.text}\")
        except Exception as e:
            print(f\"Exception when creating bucket: {str(e)}\")
        " &&
        echo "Starting application..." &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      '

volumes:
  supabase-db-data: 